From 3964a2d9970a48ebe0e0d5d3f016e690ba191d3a Mon Sep 17 00:00:00 2001
From: Sameer Rahmani <lxsameer@gnu.org>
Date: Mon, 11 Sep 2017 22:47:12 +0100
Subject: [PATCH] CLJS-2166: Add uri? predicate

Clojure introduced a `uri?` predicate in 1.9. This commit adds support for `uri`
to Clojurescript under `cljs.core/uri?`. It returns true if the given argument
is an instance of `goog.Uri`, false otherwise.
---
 src/main/cljs/cljs/core.cljs      | 29 +++++++++++++++++++----------
 src/test/cljs/cljs/core_test.cljs | 11 +++++++++++
 2 files changed, 30 insertions(+), 10 deletions(-)

diff --git a/src/main/cljs/cljs/core.cljs b/src/main/cljs/cljs/core.cljs
index 519e4ab0..3922709c 100644
--- a/src/main/cljs/cljs/core.cljs
+++ b/src/main/cljs/cljs/core.cljs
@@ -15,7 +15,7 @@
   (:import [goog.string StringBuffer]))
 
 ;; next line is auto-generated by the build-script - Do not edit!
-(def *clojurescript-version*)
+(def *clojurescript-version* "1.9.923")
 
 ;; Setting of these Vars is in ClojureScript code is associated with intrinsics
 ;; that affect compilation state, but otherwise turn into no-ops in the emitted
@@ -1696,7 +1696,7 @@ reduces them without incurring seq initialization"
     (if (pos? i)
       (RSeq. ci (dec i) nil)
       ()))
-  
+
   INext
   (-next [coll]
     (when (pos? i)
@@ -1796,7 +1796,7 @@ reduces them without incurring seq initialization"
 
       (array? coll)
       (alength coll)
-    
+
       (string? coll)
       (.-length coll)
 
@@ -2505,7 +2505,7 @@ reduces them without incurring seq initialization"
 
        (array? coll)
        (array-reduce coll f val)
-      
+
        (string? coll)
        (array-reduce coll f val)
 
@@ -3228,7 +3228,7 @@ reduces them without incurring seq initialization"
 
   ISeqable
   (-seq [coll] coll)
-  
+
   IReduce
   (-reduce [coll f] (seq-reduce f coll))
   (-reduce [coll f start] (seq-reduce f start coll)))
@@ -3263,7 +3263,7 @@ reduces them without incurring seq initialization"
   (toString [_] (str ":" fqn))
   (equiv [this other]
     (-equiv this other))
-  
+
   IEquiv
   (-equiv [_ other]
     (if (instance? Keyword other)
@@ -6649,13 +6649,13 @@ reduces them without incurring seq initialization"
               @init
               (recur (+ i 2) init)))
           init))))
-  
+
   IReduce
   (-reduce [coll f]
     (iter-reduce coll f))
   (-reduce [coll f start]
     (iter-reduce coll f start))
-  
+
   IFn
   (-invoke [coll k]
     (-lookup coll k))
@@ -8615,7 +8615,7 @@ reduces them without incurring seq initialization"
 
   IHash
   (-hash [coll] (hash-ordered-coll coll))
-  
+
   ISeq
   (-first [coll]
     (let [^not-native me (-first mseq)]
@@ -9992,7 +9992,7 @@ reduces them without incurring seq initialization"
     (if (vector? y)
       (compare-indexed x y)
       (throw (js/Error. (str "Cannot compare " x " to " y)))))
-  
+
   PersistentVector
   (-compare [x y]
     (if (vector? y)
@@ -11168,3 +11168,12 @@ reduces them without incurring seq initialization"
   Bootstrap only."
   [ns-obj]
   (.-name ns-obj))
+
+(defn uri?
+  "Returns true X is a goog.Uri instance."
+  {:added "1.9"}
+  [x]
+  (try
+    (instance? goog.Uri x)
+    (catch js/TypeError _
+      false)))
diff --git a/src/test/cljs/cljs/core_test.cljs b/src/test/cljs/cljs/core_test.cljs
index f2d7b065..021a1f70 100644
--- a/src/test/cljs/cljs/core_test.cljs
+++ b/src/test/cljs/cljs/core_test.cljs
@@ -7,6 +7,7 @@
 ;   You must not remove this notice, or any other, from this software.
 
 (ns cljs.core-test
+  (:import goog.Uri)
   (:refer-clojure :exclude [iter])
   (:require [cljs.test :refer-macros [deftest testing is]]
             [clojure.test.check :as tc]
@@ -1493,3 +1494,13 @@
   ;;   (assert (= (:arglists var-meta) '([a b]))))
 
   )
+
+(deftest uri-predicate
+  (testing "Testing uri?"
+    (is (not (uri? "http://clojurescript.org")))
+    (is (not (uri? 42)))
+    (is (not (uri? [])))
+    (is (not (uri? {})))
+    (is (uri? (goog.Uri. "")))
+    (is (uri? (goog.Uri. "http://clojurescript.org")))
+    (is (uri? (goog.Uri. "some string")))))
-- 
2.11.0

